


void quickSort(int[] nums, int l, int r) {
    if (r <= l) return;
    int pivot = partition(nums, l, r);
    quickSort(nums, l, pivot - 1);
    quickSort(nums, pivot + 1, r);
}
int partition(int[] nums, int l, int r) {
    int cur = l, pivot = r;
    for (int i = l; i < r; i++) {
        if (nums[i] < nums[pivot]) {
            int temp = nums[i];
            nums[i] = nums[cur];
            nums[cur] = temp;
            cur++;
        }
    }

    int temp = nums[pivot];
    nums[pivot] = nums[cur];
    nums[cur] = temp;

    return cur;
}

void mergeSort(int[] nums, int l, int r) {
    if (r <= l) return;
    int m = l + ((r - l) >> 1);
    mergeSort(nums, l, m);
    mergeSort(nums, m + 1, r);
    merge(nums, l, m, r);
}
void merge(int[] nums, int l, int m, int r) {
    int i = l, j = m + 1, k = 0;
    int[] merge = new int[r - l + 1];
    while (i <= m && j <= r) merge[k++] = nums[i] <= nums[j] ? nums[i++] : nums[j++];
    while (i <= m) merge[k++] = nums[i++];
    while (j <= r) merge[k++] = nums[j++];
    System.arraycopy(merge, 0, nums, left, merge.length);
}

public int bs(int[] nums, int value) {
    int l = 0, r = nums.length - 1;
    while (l <= r) {
        int m = l + ((r - l) >> 1);
        if (nums[m] == value) return m;
        else if (nums[m] > value) r = m - 1;
        else l = m + 1;
    }
    return -1;
}